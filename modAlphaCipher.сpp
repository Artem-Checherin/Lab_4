/*! @file modAlphaCipher.cpp
* @author Чечерин Артём 
* @version 1.0
* @date 04.06.2021
* @brief Модуль "шифрования" modAlphaCipher.cpp
* @details Осуществляет шифрование алгоритмом Гронсвельда на русском языке.
* @details Lab 2-1
* @brief Заголовочный файл для модуля modAlphaCipher.cpp
*/
#include "modAlphaCipher.h"
modAlphaCipher::modAlphaCipher(const std::string& skey)
/**
* @brief Перевод из кодировки UTF-32 в UTF-8
* @param [in] s Строка в кодировке UTF-32
* @return Строка в кодировке UTF-8
*/
{
	int dl_key,kol_a;
	locale loc("ru_RU.UTF-8");
	wstring_convert<codecvt_utf8<wchar_t>, wchar_t> codec;
	wstring ws = codec.from_bytes(skey);
	dl_key=skey.length()/2;
	kol_a=0;
	for (auto wc: ws) {
		if ((wc == 1040) || (wc == 1072)) {
			kol_a++;
		}
	}
	if (kol_a == dl_key)
		throw Error(string ("Вырожденный ключ: ") + skey);
	for (auto wc: ws)
		if (!((wc>= 1040) && (wc <= 1071)) || (wc == 1025)) { //14
			throw Error(string ("Запрещенные символы в ключе: ") + skey);
		}
		for (auto wc: ws)
		if ((wc>= 0) && (wc <= 9)) { //11
		throw Error(string ("Цифры в ключе: ") + skey);
		}
	for (unsigned i=0; i<numAlpha.size(); i++) {
		alphaNum[numAlpha[i]]=i;
	}
	std::wstring wskey = towstr(skey);
	key = convert(wskey);
}
/**
* @brief Зашифровывание
* @param [in] open_text Открытый текст. Не должен быть пустой строкой.
* Строчные символы автоматически преобразуются к
прописным.
* Все не буквы удаляются
* @return Зашифрованная строка
* @throw Error - если текст пустой
*/
std::string modAlphaCipher::encrypt(const std::string& open_text)
{
		if (open_text.empty()) {
		throw Error (string("Пустая строка"));
	}
	for (auto wc: open_text) //14
		if ((wc>= 0) && (wc <= 9)) { //11
		throw Error(string ("Цифры в строке: ") + open_text);
		}
	
	std::wstring open_wtext = towstr (open_text);
	std::vector<int> work = convert(open_wtext);
	for(unsigned i=0; i < work.size(); i++) {
		work[i] = (work[i] + key[i % key.size()]) %alphaNum.size();
	}
	return convert(work);
}
/**
* @brief Расшифровывание
* @param [in] cipher_text Зашифрованный текст в
кодировке UTF-8. Не должен быть пустой строкой.
* Не должен содержать строчные символы и не буквы.
* @return Руссифрованная строка в кодировке UTF-8
* @throw Error - текст пустой
*/
std::string modAlphaCipher::decrypt(const std::string& cipher_text)
{
	if (cipher_text.empty()) {
		throw Error (string("Пустая строка"));
	}
	std::wstring cipher_wtext = towstr (cipher_text);
	std::vector<int> work = convert(cipher_wtext);
	for(unsigned i=0; i < work.size(); i++) {
		work[i] = (work[i] + alphaNum.size() - key[i %key.size()])
		          % alphaNum.size();
	}
	return convert(work);
}
/**
* @brief Пребразование строки в целочисленный вектор
* @param [in] ws текст в кодировке UTF-8.
* Не должен быть пустой строкой.
* Не должен содержать строчные символы и не буквы.
* @return [in] alphaNum целочисленный вектор.
*/
inline std::vector<int> modAlphaCipher::convert(const std::wstring&
        ws)
{
	std::vector<int> result;
	for(auto wc:ws) {
		result.push_back(alphaNum[wc]);
	}
	return result;
}
/**
* @brief Пребразование целочисленного вектора в строку
* @param [in] vector целочисленный вектор
* @return [in] wresult текст в кодировке UTF-8.
*/
inline std::string modAlphaCipher::convert(const std::vector<int>& v)
{
	std::wstring wresult;
	for(auto i:v) {
		wresult.push_back(numAlpha[i]);
	}
	std::string result = fromwstr(wresult);
	return result;
}
/**
* @brief Получение строки русских символов из кода
* @param [in] s текс в кодировке UTF-8
* @return [in] wresult текст русских символов.
*/
std::wstring modAlphaCipher::towstr(const std::string& s)
{
	std::locale loc("ru_RU.UTF-8");
	std::wstring_convert<std::codecvt_utf8<wchar_t>, wchar_t> codec;
	std::wstring ws = codec.from_bytes(s);
	return ws;
}
/**
* @brief Получение кода из строки русских символов
* @param [in] ws текст русских символов
* @return [in] s текс в кодировке UTF-8.
*/
std::string modAlphaCipher::fromwstr(const std::wstring& ws)
{
	std::locale loc("ru_RU.UTF-8");
	std::wstring_convert<std::codecvt_utf8<wchar_t>, wchar_t> codec;
	std::string s = codec.to_bytes(ws);
	return s;
}